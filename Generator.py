import random
import sys
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from faker import Faker
import csv
import os
import time
import threading
import string
import unicodedata
import subprocess  # –î–æ–±–∞–≤–∏–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–æ–∫
import math  # –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–ª–∞–≥–∞

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UNIQUE_ID_LENGTH = 3  # –î–ª–∏–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

class PhonebookGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üì± –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏")
        self.root.geometry("700x600")
        self.root.resizable(True, True)
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±–µ–∏—Ö –ª–æ–∫–∞–ª–µ–π
        self.ru_faker = Faker('ru_RU')
        self.en_faker = Faker('en_US')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.name_format = tk.IntVar(value=3)
        self.alphabet_choice = tk.IntVar(value=1)
        self.prefix = tk.StringVar(value="+7")
        self.start_num = tk.IntVar(value=1000)
        self.end_num = tk.IntVar(value=2000)
        self.save_dir = tk.StringVar(value=os.path.expanduser("~"))
        self.progress = tk.DoubleVar(value=0)
        
        # –°–æ–∑–¥–∞–µ–º canvas –∏ scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(root)
        scrollbar = ttk.Scrollbar(root, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –≤–Ω—É—Ç—Ä–∏ scrollable_frame
        main_frame = ttk.Frame(scrollable_frame, padding=15)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–µ–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏
        format_frame = ttk.LabelFrame(main_frame, text="–§–æ—Ä–º–∞—Ç –∏–º–µ–Ω", padding=10)
        format_frame.pack(fill=tk.X, pady=5)
        
        formats = [
            ("–ò–º—è + ID (–ê–ª–µ–∫—Å–µ–π_abc)", 1),
            ("–ò–º—è –§–∞–º–∏–ª–∏—è + ID (–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤ xyz)", 2),
            ("–§–∞–º–∏–ª–∏—è –ò.–û. + ID (–°–º–∏—Ä–Ω–æ–≤ –ê.–ü. 123)", 3),
            ("–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è, –ò–º—è + ID (Smith, John 4d5)", 4),
            ("–ü–æ–ª–Ω–æ–µ –§–ò–û + ID (–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á a1b)", 5)
        ]
        
        for text, value in formats:
            ttk.Radiobutton(format_frame, text=text, variable=self.name_format, 
                            value=value).pack(anchor=tk.W, padx=5, pady=2)
        
        # –°–µ–∫—Ü–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞
        alphabet_frame = ttk.LabelFrame(main_frame, text="–ê–ª—Ñ–∞–≤–∏—Ç", padding=10)
        alphabet_frame.pack(fill=tk.X, pady=5)
        
        alphabets = [
            ("–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 1),
            ("–õ–∞—Ç–∏–Ω–∏—Ü–∞", 2),
            ("–°–º–µ—à–∞–Ω–Ω—ã–π (–æ–±–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞)", 3)
        ]
        
        for text, value in alphabets:
            ttk.Radiobutton(alphabet_frame, text=text, variable=self.alphabet_choice, 
                           value=value).pack(anchor=tk.W, padx=5, pady=2)
        
        # –°–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–º–µ—Ä–æ–≤
        number_frame = ttk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–º–µ—Ä–æ–≤", padding=10)
        number_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(number_frame, text="–ü—Ä–µ—Ñ–∏–∫—Å –Ω–æ–º–µ—Ä–∞:").grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        ttk.Entry(number_frame, textvariable=self.prefix, width=15).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(number_frame, text="–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:").grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
        ttk.Entry(number_frame, textvariable=self.start_num, width=15).grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(number_frame, text="–ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä:").grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
        ttk.Entry(number_frame, textvariable=self.end_num, width=15).grid(row=2, column=1, padx=5, pady=5)
        
        # –°–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_frame = ttk.LabelFrame(main_frame, text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", padding=10)
        save_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(save_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").pack(anchor=tk.W, padx=5, pady=2)
        
        dir_frame = ttk.Frame(save_frame)
        dir_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Entry(dir_frame, textvariable=self.save_dir).pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        ttk.Button(dir_frame, text="–û–±–∑–æ—Ä", command=self.select_directory).pack(side=tk.RIGHT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_frame = ttk.Frame(main_frame)
        progress_frame.pack(fill=tk.X, pady=10)
        
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress, 
                                           maximum=100, mode='determinate')
        self.progress_bar.pack(fill=tk.X, padx=5, pady=5)
        
        self.status_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        self.status_label.pack(fill=tk.X, padx=5, pady=2)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        button_frame = ttk.Frame(root)
        button_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=15, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–∞–≥ –°–°–°–†
        self.create_ussr_flag(button_frame)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ë–û–õ–¨–®–ê–Ø –ò –ó–ï–õ–ï–ù–ê–Ø (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        self.generate_button = tk.Button(
            button_frame,
            text="–ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò",
            command=self.start_generation,
            bg="#4CAF50",
            fg="white",
            font=('Arial', 14, 'bold'),
            padx=20,
            pady=15,
            relief=tk.RAISED,
            bd=3
        )
        self.generate_button.pack(fill=tk.X, pady=(0, 5), ipadx=10, ipady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ (—Ç–æ–∂–µ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
        ttk.Button(button_frame, text="–í—ã—Ö–æ–¥", command=root.quit).pack(pady=(5, 0))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º—ã—à—å—é –∫ canvas
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind("<MouseWheel>", _on_mousewheel)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        def configure_canvas(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
            canvas_width = event.width
            canvas.itemconfig(canvas.find_all()[0], width=canvas_width)
        
        canvas.bind("<Configure>", configure_canvas)
    
    def create_ussr_flag(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–∞–≥ –°–°–°–†"""
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–ª–∞–≥–∞
        flag_frame = ttk.Frame(parent)
        flag_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Canvas –¥–ª—è —Ñ–ª–∞–≥–∞
        self.flag_canvas = tk.Canvas(flag_frame, height=80, bg='#E6E6E6')
        self.flag_canvas.pack(fill=tk.X, padx=20)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–ª–∞–≥–∞
        self.flag_width = 200
        self.flag_height = 60
        self.wave_amplitude = 8
        self.wave_frequency = 0.02
        self.animation_speed = 0.1
        self.time_offset = 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animate_flag()
    
    def draw_flag(self):
        """–†–∏—Å—É–µ—Ç —Ñ–ª–∞–≥ –°–°–°–† —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞–∑–≤–µ–≤–∞–Ω–∏—è"""
        self.flag_canvas.delete("all")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        canvas_width = self.flag_canvas.winfo_width()
        if canvas_width <= 1:
            canvas_width = 400  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        canvas_height = self.flag_canvas.winfo_height()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–ª–∞–≥
        start_x = (canvas_width - self.flag_width) // 2
        start_y = (canvas_height - self.flag_height) // 2
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∞–∑–≤–µ–≤–∞–Ω–∏—è
        segments = 20
        segment_width = self.flag_width // segments
        
        for i in range(segments):
            x1 = start_x + i * segment_width
            x2 = start_x + (i + 1) * segment_width
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            wave_offset1 = math.sin(self.time_offset + i * self.wave_frequency) * self.wave_amplitude
            wave_offset2 = math.sin(self.time_offset + (i + 1) * self.wave_frequency) * self.wave_amplitude
            
            y1_top = start_y + wave_offset1
            y2_top = start_y + wave_offset2
            y1_bottom = start_y + self.flag_height + wave_offset1
            y2_bottom = start_y + self.flag_height + wave_offset2
            
            # –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω —Ñ–ª–∞–≥–∞
            points = [x1, y1_top, x2, y2_top, x2, y2_bottom, x1, y1_bottom]
            self.flag_canvas.create_polygon(points, fill='#CC0000', outline='#CC0000')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–ø –∏ –º–æ–ª–æ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        center_x = start_x + self.flag_width // 4
        center_y = start_y + self.flag_height // 2
        
        # –í–æ–ª–Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
        symbol_wave = math.sin(self.time_offset + self.flag_width // 4 * self.wave_frequency) * self.wave_amplitude
        symbol_y = center_y + symbol_wave
        
        # –†–∏—Å—É–µ–º –∑–≤–µ–∑–¥—É (—É–ø—Ä–æ—â–µ–Ω–Ω—É—é)
        star_size = 8
        self.draw_star(center_x - 15, symbol_y, star_size, '#FFD700')
        
        # –†–∏—Å—É–µ–º —Å–µ—Ä–ø (–∫–∞–∫ –¥—É–≥–∞)
        self.flag_canvas.create_arc(center_x - 5, symbol_y - 8, center_x + 10, symbol_y + 8, 
                                   start=30, extent=180, style='arc', 
                                   outline='#FFD700', width=3)
        
        # –†–∏—Å—É–µ–º –º–æ–ª–æ—Ç (–∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ä—É—á–∫–æ–π)
        self.flag_canvas.create_rectangle(center_x + 5, symbol_y - 3, center_x + 15, symbol_y + 3, 
                                         fill='#FFD700', outline='#FFD700')
        self.flag_canvas.create_line(center_x + 10, symbol_y + 3, center_x + 10, symbol_y + 10, 
                                    fill='#FFD700', width=2)
    
    def draw_star(self, x, y, size, color):
        """–†–∏—Å—É–µ—Ç –ø—è—Ç–∏–∫–æ–Ω–µ—á–Ω—É—é –∑–≤–µ–∑–¥—É"""
        points = []
        for i in range(10):
            angle = math.pi * i / 5
            if i % 2 == 0:
                radius = size
            else:
                radius = size * 0.4
            
            px = x + radius * math.cos(angle - math.pi/2)
            py = y + radius * math.sin(angle - math.pi/2)
            points.extend([px, py])
        
        self.flag_canvas.create_polygon(points, fill=color, outline=color)
    
    def animate_flag(self):
        """–ê–Ω–∏–º–∏—Ä—É–µ—Ç —Ñ–ª–∞–≥"""
        self.draw_flag()
        self.time_offset += self.animation_speed
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.root.after(50, self.animate_flag)
    
    def select_directory(self):
        directory = filedialog.askdirectory(initialdir=self.save_dir.get())
        if directory:
            self.save_dir.set(directory)
    
    def generate_unique_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
        chars = string.ascii_letters + string.digits
        return ''.join(random.choice(chars) for _ in range(UNIQUE_ID_LENGTH))
    
    def normalize_name(self, name):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è, —É–¥–∞–ª—è—è –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏"""
        normalized = unicodedata.normalize('NFD', name)
        return ''.join(c for c in normalized if unicodedata.category(c) != 'Mn')
    
    def generate_name_with_id(self, name_format, used_names, locale='ru_RU', mixed_alphabets=False):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Å —Ñ–∞–º–∏–ª–∏–µ–π, –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID"""
        while True:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if mixed_alphabets and random.random() > 0.7:  # 30% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–ª—Ñ–∞–≤–∏—Ç
                current_locale = 'en_US' if locale == 'ru_RU' else 'ru_RU'
            else:
                current_locale = locale
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            local_faker = self.en_faker if current_locale == 'en_US' else self.ru_faker
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
            first_name = local_faker.first_name()
            last_name = local_faker.last_name()
            middle_name = local_faker.first_name() if current_locale == 'ru_RU' else local_faker.last_name()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            first_name = self.normalize_name(first_name)
            last_name = self.normalize_name(last_name)
            middle_name = self.normalize_name(middle_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            unique_id = self.generate_unique_id()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Å ID –ø–æ—Å–ª–µ —Ñ–∞–º–∏–ª–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–æ–≤
            if name_format == 1:  # –¢–æ–ª—å–∫–æ –∏–º—è + ID
                name = f"{first_name}_{unique_id}"
            elif name_format == 2:  # –ò–º—è + —Ñ–∞–º–∏–ª–∏—è + ID
                name = f"{first_name} {last_name} {unique_id}"
            elif name_format == 3:  # –§–∞–º–∏–ª–∏—è + –∏–Ω–∏—Ü–∏–∞–ª—ã + ID
                initials = f"{first_name[0]}.{middle_name[0]}." if middle_name else f"{first_name[0]}."
                name = f"{last_name} {initials} {unique_id}"
            elif name_format == 4:  # –ó–∞–ø–∞–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è, –ò–º—è + ID
                name = f"{last_name}, {first_name} {unique_id}"
            else:  # –ü–æ–ª–Ω–æ–µ –§–ò–û + ID
                name = f"{last_name} {first_name} {middle_name} {unique_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if name not in used_names:
                used_names.add(name)
                return name
    
    def update_progress(self, current, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å"""
        percent = (current / total) * 100
        self.progress.set(percent)
        self.status_label.config(text=f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {current}/{total} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ({percent:.1f}%)")
        self.root.update_idletasks()
    
    def show_message(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        messagebox.showinfo(title, message)
    
    def open_directory(self, path):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –û–°"""
        try:
            if os.name == 'nt':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º explorer –¥–ª—è Windows
                os.startfile(path)
            elif sys.platform == 'darwin':
                # –î–ª—è macOS
                subprocess.Popen(['open', path])
            else:
                # –î–ª—è Linux
                subprocess.Popen(['xdg-open', path])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}")
    
    def generation_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            name_format = self.name_format.get()
            alphabet_choice = self.alphabet_choice.get()
            prefix = self.prefix.get()
            start = self.start_num.get()
            end = self.end_num.get()
            save_dir = self.save_dir.get()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not prefix:
                self.show_message("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–æ–º–µ—Ä–∞")
                return
                
            if start >= end:
                self.show_message("–û—à–∏–±–∫–∞", "–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ")
                return
                
            total_contacts = end - start + 1
            if total_contacts > 100000:
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                          f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å {total_contacts} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                    return
            
            locale = 'ru_RU'
            mixed_alphabets = False
            
            if alphabet_choice == 2:
                locale = 'en_US'
            elif alphabet_choice == 3:
                mixed_alphabets = True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = f"contacts_{prefix}_{start}-{end}.csv"
            full_path = os.path.join(save_dir, filename)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if os.path.exists(full_path):
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                          f"–§–∞–π–ª '{filename}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?"):
                    return
            
            # –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            start_time = time.time()
            self.status_label.config(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            self.generate_button.config(state=tk.DISABLED, bg="#8BC34A")  # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            self.root.update()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            contacts = []
            max_digits = len(str(end))
            all_used_names = set()
            
            for i, num in enumerate(range(start, end + 1)):
                suffix = str(num).zfill(max_digits)
                phone = f"{prefix}{suffix}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Å ID
                name = self.generate_name_with_id(
                    name_format, 
                    all_used_names, 
                    locale,
                    mixed_alphabets
                )
                
                contacts.append({"Name": name, "Phone": phone})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º
                if (i + 1) % 100 == 0 or i == total_contacts - 1:
                    self.update_progress(i + 1, total_contacts)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(full_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=["Name", "Phone"])
                writer.writeheader()
                writer.writerows(contacts)
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_time = time.time() - start_time
            file_size = os.path.getsize(full_path) / 1024  # –†–∞–∑–º–µ—Ä –≤ –ö–ë
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_message = (
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üìÇ –§–∞–π–ª: {full_path}\n"
                f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ö–ë\n"
                f"üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts}\n"
                f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: {len(all_used_names)}\n"
                f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {total_time:.2f} —Å–µ–∫—É–Ω–¥\n"
                f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {total_contacts/total_time:.1f} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤/—Å–µ–∫"
            )
            
            self.show_message("–ì–æ—Ç–æ–≤–æ", result_message)
            self.status_label.config(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.progress.set(0)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.generate_button.config(state=tk.NORMAL, bg="#4CAF50")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–æ–º
            self.open_directory(save_dir)
                
        except Exception as e:
            self.show_message("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            self.progress.set(0)
            self.generate_button.config(state=tk.NORMAL, bg="#4CAF50")  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    
    def start_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress.set(0)
        self.status_label.config(text="–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        self.root.update()
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        threading.Thread(target=self.generation_thread, daemon=True).start()

if __name__ == "__main__":
    root = tk.Tk()
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    window_width = 700
    window_height = 600
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    center_x = int(screen_width/2 - window_width/2)
    center_y = int(screen_height/2 - window_height/2)
    root.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')
    
    app = PhonebookGeneratorApp(root)
    root.mainloop()