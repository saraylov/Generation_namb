import random
import os
import time
import threading
import string
import unicodedata
import csv
from faker import Faker

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.checkbox import CheckBox
from kivy.uix.progressbar import ProgressBar
from kivy.uix.popup import Popup
from kivy.uix.filechooser import FileChooserListView
from kivy.uix.gridlayout import GridLayout
from kivy.clock import Clock
from kivy.metrics import dp
from kivy.utils import platform

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UNIQUE_ID_LENGTH = 3

class PhonebookGeneratorApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.ru_faker = Faker('ru_RU')
        self.en_faker = Faker('en_US')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.name_format = 3
        self.alphabet_choice = 1
        self.prefix = "+7"
        self.start_num = 1000
        self.end_num = 2000
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Android)
        if platform == 'android':
            from android.storage import primary_external_storage_path
            self.save_dir = primary_external_storage_path()
        else:
            self.save_dir = os.path.expanduser("~")
    
    def build(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(text='üì± –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏', 
                     font_size=dp(18), size_hint_y=None, height=dp(50))
        main_layout.add_widget(title)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll = ScrollView()
        content = BoxLayout(orientation='vertical', spacing=dp(10), size_hint_y=None)
        content.bind(minimum_height=content.setter('height'))
        
        # –°–µ–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏
        format_section = self.create_format_section()
        content.add_widget(format_section)
        
        # –°–µ–∫—Ü–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞
        alphabet_section = self.create_alphabet_section()
        content.add_widget(alphabet_section)
        
        # –°–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–º–µ—Ä–æ–≤
        number_section = self.create_number_section()
        content.add_widget(number_section)
        
        # –°–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_section = self.create_save_section()
        content.add_widget(save_section)
        
        scroll.add_widget(content)
        main_layout.add_widget(scroll)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ProgressBar(max=100, size_hint_y=None, height=dp(30))
        main_layout.add_widget(self.progress_bar)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(text='–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', 
                                 size_hint_y=None, height=dp(30))
        main_layout.add_widget(self.status_label)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_button = Button(text='–ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò', 
                                     size_hint_y=None, height=dp(60),
                                     background_color=(0.3, 0.7, 0.3, 1))
        self.generate_button.bind(on_press=self.start_generation)
        main_layout.add_widget(self.generate_button)
        
        return main_layout
    
    def create_format_section(self):
        section = BoxLayout(orientation='vertical', spacing=dp(5), size_hint_y=None)
        section.bind(minimum_height=section.setter('height'))
        
        title = Label(text='–§–æ—Ä–º–∞—Ç –∏–º–µ–Ω:', font_size=dp(16), 
                     size_hint_y=None, height=dp(30))
        section.add_widget(title)
        
        formats = [
            ("–ò–º—è + ID (–ê–ª–µ–∫—Å–µ–π_abc)", 1),
            ("–ò–º—è –§–∞–º–∏–ª–∏—è + ID (–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤ xyz)", 2),
            ("–§–∞–º–∏–ª–∏—è –ò.–û. + ID (–°–º–∏—Ä–Ω–æ–≤ –ê.–ü. 123)", 3),
            ("–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è, –ò–º—è + ID (Smith, John 4d5)", 4),
            ("–ü–æ–ª–Ω–æ–µ –§–ò–û + ID (–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á a1b)", 5)
        ]
        
        self.format_checkboxes = []
        for text, value in formats:
            layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(30))
            checkbox = CheckBox(active=(value == 3), size_hint_x=None, width=dp(30))
            label = Label(text=text, text_size=(None, None))
            
            def on_checkbox_active(checkbox, active, val=value):
                if active:
                    self.name_format = val
                    for cb in self.format_checkboxes:
                        if cb != checkbox:
                            cb.active = False
            
            checkbox.bind(active=on_checkbox_active)
            self.format_checkboxes.append(checkbox)
            
            layout.add_widget(checkbox)
            layout.add_widget(label)
            section.add_widget(layout)
        
        return section
    
    def create_alphabet_section(self):
        section = BoxLayout(orientation='vertical', spacing=dp(5), size_hint_y=None)
        section.bind(minimum_height=section.setter('height'))
        
        title = Label(text='–ê–ª—Ñ–∞–≤–∏—Ç:', font_size=dp(16), 
                     size_hint_y=None, height=dp(30))
        section.add_widget(title)
        
        alphabets = [
            ("–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 1),
            ("–õ–∞—Ç–∏–Ω–∏—Ü–∞", 2),
            ("–°–º–µ—à–∞–Ω–Ω—ã–π (–æ–±–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞)", 3)
        ]
        
        self.alphabet_checkboxes = []
        for text, value in alphabets:
            layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(30))
            checkbox = CheckBox(active=(value == 1), size_hint_x=None, width=dp(30))
            label = Label(text=text, text_size=(None, None))
            
            def on_checkbox_active(checkbox, active, val=value):
                if active:
                    self.alphabet_choice = val
                    for cb in self.alphabet_checkboxes:
                        if cb != checkbox:
                            cb.active = False
            
            checkbox.bind(active=on_checkbox_active)
            self.alphabet_checkboxes.append(checkbox)
            
            layout.add_widget(checkbox)
            layout.add_widget(label)
            section.add_widget(layout)
        
        return section
    
    def create_number_section(self):
        section = BoxLayout(orientation='vertical', spacing=dp(5), size_hint_y=None)
        section.bind(minimum_height=section.setter('height'))
        
        title = Label(text='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–º–µ—Ä–æ–≤:', font_size=dp(16), 
                     size_hint_y=None, height=dp(30))
        section.add_widget(title)
        
        # –ü—Ä–µ—Ñ–∏–∫—Å
        prefix_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        prefix_layout.add_widget(Label(text='–ü—Ä–µ—Ñ–∏–∫—Å –Ω–æ–º–µ—Ä–∞:', size_hint_x=0.4))
        self.prefix_input = TextInput(text=self.prefix, size_hint_x=0.6, multiline=False)
        self.prefix_input.bind(text=self.on_prefix_change)
        prefix_layout.add_widget(self.prefix_input)
        section.add_widget(prefix_layout)
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
        start_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        start_layout.add_widget(Label(text='–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:', size_hint_x=0.4))
        self.start_input = TextInput(text=str(self.start_num), size_hint_x=0.6, 
                                    multiline=False, input_filter='int')
        self.start_input.bind(text=self.on_start_change)
        start_layout.add_widget(self.start_input)
        section.add_widget(start_layout)
        
        # –ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä
        end_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        end_layout.add_widget(Label(text='–ö–æ–Ω–µ—á–Ω—ã–π –Ω–æ–º–µ—Ä:', size_hint_x=0.4))
        self.end_input = TextInput(text=str(self.end_num), size_hint_x=0.6, 
                                  multiline=False, input_filter='int')
        self.end_input.bind(text=self.on_end_change)
        end_layout.add_widget(self.end_input)
        section.add_widget(end_layout)
        
        return section
    
    def create_save_section(self):
        section = BoxLayout(orientation='vertical', spacing=dp(5), size_hint_y=None)
        section.bind(minimum_height=section.setter('height'))
        
        title = Label(text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', font_size=dp(16), 
                     size_hint_y=None, height=dp(30))
        section.add_widget(title)
        
        dir_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(40))
        dir_layout.add_widget(Label(text='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', size_hint_x=0.6))
        browse_button = Button(text='–û–±–∑–æ—Ä', size_hint_x=0.4)
        browse_button.bind(on_press=self.select_directory)
        dir_layout.add_widget(browse_button)
        section.add_widget(dir_layout)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
        self.dir_label = Label(text=self.save_dir, text_size=(None, None), 
                              size_hint_y=None, height=dp(30))
        section.add_widget(self.dir_label)
        
        return section
    
    def on_prefix_change(self, instance, value):
        self.prefix = value
    
    def on_start_change(self, instance, value):
        try:
            self.start_num = int(value) if value else 1000
        except ValueError:
            self.start_num = 1000
    
    def on_end_change(self, instance, value):
        try:
            self.end_num = int(value) if value else 2000
        except ValueError:
            self.end_num = 2000
    
    def select_directory(self, instance):
        content = BoxLayout(orientation='vertical')
        
        filechooser = FileChooserListView(path=self.save_dir)
        content.add_widget(filechooser)
        
        buttons = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50))
        select_button = Button(text='–í—ã–±—Ä–∞—Ç—å')
        cancel_button = Button(text='–û—Ç–º–µ–Ω–∞')
        
        popup = Popup(title='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É', content=content, size_hint=(0.9, 0.9))
        
        def on_select(instance):
            if filechooser.selection:
                selected_path = filechooser.selection[0]
                if os.path.isdir(selected_path):
                    self.save_dir = selected_path
                else:
                    self.save_dir = os.path.dirname(selected_path)
                self.dir_label.text = self.save_dir
            popup.dismiss()
        
        def on_cancel(instance):
            popup.dismiss()
        
        select_button.bind(on_press=on_select)
        cancel_button.bind(on_press=on_cancel)
        
        buttons.add_widget(select_button)
        buttons.add_widget(cancel_button)
        content.add_widget(buttons)
        
        popup.open()
    
    def generate_unique_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
        chars = string.ascii_letters + string.digits
        return ''.join(random.choice(chars) for _ in range(UNIQUE_ID_LENGTH))
    
    def normalize_name(self, name):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è, —É–¥–∞–ª—è—è –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏"""
        normalized = unicodedata.normalize('NFD', name)
        return ''.join(c for c in normalized if unicodedata.category(c) != 'Mn')
    
    def generate_name_with_id(self, name_format, used_names, locale='ru_RU', mixed_alphabets=False):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Å —Ñ–∞–º–∏–ª–∏–µ–π, –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID"""
        while True:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if mixed_alphabets and random.random() > 0.7:  # 30% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–ª—Ñ–∞–≤–∏—Ç
                current_locale = 'en_US' if locale == 'ru_RU' else 'ru_RU'
            else:
                current_locale = locale
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            local_faker = self.en_faker if current_locale == 'en_US' else self.ru_faker
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
            first_name = local_faker.first_name()
            last_name = local_faker.last_name()
            middle_name = local_faker.first_name() if current_locale == 'ru_RU' else local_faker.last_name()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            first_name = self.normalize_name(first_name)
            last_name = self.normalize_name(last_name)
            middle_name = self.normalize_name(middle_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            unique_id = self.generate_unique_id()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è —Å ID –ø–æ—Å–ª–µ —Ñ–∞–º–∏–ª–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–æ–≤
            if name_format == 1:  # –¢–æ–ª—å–∫–æ –∏–º—è + ID
                name = f"{first_name}_{unique_id}"
            elif name_format == 2:  # –ò–º—è + —Ñ–∞–º–∏–ª–∏—è + ID
                name = f"{first_name} {last_name} {unique_id}"
            elif name_format == 3:  # –§–∞–º–∏–ª–∏—è + –∏–Ω–∏—Ü–∏–∞–ª—ã + ID
                initials = f"{first_name[0]}.{middle_name[0]}." if middle_name else f"{first_name[0]}."
                name = f"{last_name} {initials} {unique_id}"
            elif name_format == 4:  # –ó–∞–ø–∞–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è, –ò–º—è + ID
                name = f"{last_name}, {first_name} {unique_id}"
            else:  # –ü–æ–ª–Ω–æ–µ –§–ò–û + ID
                name = f"{last_name} {first_name} {middle_name} {unique_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if name not in used_names:
                used_names.add(name)
                return name
    
    def update_progress(self, current, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å"""
        percent = (current / total) * 100
        self.progress_bar.value = percent
        self.status_label.text = f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {current}/{total} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ({percent:.1f}%)"
    
    def show_message(self, title, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        content = BoxLayout(orientation='vertical', padding=dp(10))
        content.add_widget(Label(text=message, text_size=(dp(300), None)))
        
        button = Button(text='OK', size_hint_y=None, height=dp(50))
        content.add_widget(button)
        
        popup = Popup(title=title, content=content, size_hint=(0.8, 0.6))
        button.bind(on_press=popup.dismiss)
        popup.open()
    
    def generation_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            name_format = self.name_format
            alphabet_choice = self.alphabet_choice
            prefix = self.prefix
            start = self.start_num
            end = self.end_num
            save_dir = self.save_dir
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not prefix:
                Clock.schedule_once(lambda dt: self.show_message("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–æ–º–µ—Ä–∞"), 0)
                return
                
            if start >= end:
                Clock.schedule_once(lambda dt: self.show_message("–û—à–∏–±–∫–∞", "–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ"), 0)
                return
                
            total_contacts = end - start + 1
            
            locale = 'ru_RU'
            mixed_alphabets = False
            
            if alphabet_choice == 2:
                locale = 'en_US'
            elif alphabet_choice == 3:
                mixed_alphabets = True
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = f"contacts_{prefix}_{start}-{end}.csv"
            full_path = os.path.join(save_dir, filename)
            
            # –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            start_time = time.time()
            Clock.schedule_once(lambda dt: setattr(self.status_label, 'text', "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."), 0)
            Clock.schedule_once(lambda dt: setattr(self.generate_button, 'disabled', True), 0)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            contacts = []
            max_digits = len(str(end))
            all_used_names = set()
            
            for i, num in enumerate(range(start, end + 1)):
                suffix = str(num).zfill(max_digits)
                phone = f"{prefix}{suffix}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Å ID
                name = self.generate_name_with_id(
                    name_format, 
                    all_used_names, 
                    locale,
                    mixed_alphabets
                )
                
                contacts.append({"Name": name, "Phone": phone})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º
                if (i + 1) % 100 == 0 or i == total_contacts - 1:
                    Clock.schedule_once(lambda dt, current=i+1, total=total_contacts: self.update_progress(current, total), 0)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(full_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=["Name", "Phone"])
                writer.writeheader()
                writer.writerows(contacts)
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_time = time.time() - start_time
            file_size = os.path.getsize(full_path) / 1024  # –†–∞–∑–º–µ—Ä –≤ –ö–ë
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_message = (
                f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üìÇ –§–∞–π–ª: {full_path}\n"
                f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ö–ë\n"
                f"üë• –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts}\n"
                f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω: {len(all_used_names)}\n"
                f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {total_time:.2f} —Å–µ–∫—É–Ω–¥\n"
                f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {total_contacts/total_time:.1f} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤/—Å–µ–∫"
            )
            
            Clock.schedule_once(lambda dt: self.show_message("–ì–æ—Ç–æ–≤–æ", result_message), 0)
            Clock.schedule_once(lambda dt: setattr(self.status_label, 'text', "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"), 0)
            Clock.schedule_once(lambda dt: setattr(self.progress_bar, 'value', 0), 0)
            Clock.schedule_once(lambda dt: setattr(self.generate_button, 'disabled', False), 0)
                
        except Exception as e:
            Clock.schedule_once(lambda dt: self.show_message("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}"), 0)
            Clock.schedule_once(lambda dt: setattr(self.status_label, 'text', "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"), 0)
            Clock.schedule_once(lambda dt: setattr(self.progress_bar, 'value', 0), 0)
            Clock.schedule_once(lambda dt: setattr(self.generate_button, 'disabled', False), 0)
    
    def start_generation(self, instance):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_bar.value = 0
        self.status_label.text = "–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        threading.Thread(target=self.generation_thread, daemon=True).start()

if __name__ == "__main__":
    PhonebookGeneratorApp().run()